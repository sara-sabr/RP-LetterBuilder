<!DOCTYPE HTML>
<html lang="en" dir="ltr" id="html">

<head>
	<title id="applicationTitle">Letter Builder</title>
	<HTA:APPLICATION id="LetterBuilder" BORDER="thin" BORDERSTYLE="normal" maximizeButton="yes" minimizeButton="yes" SINGLEINSTANCE="yes" SCROLLFLAT="flat" ICON="assets/favicon.ico" />
	<meta charset="UTF-8">
	<meta http-equiv="x-ua-compatible" content="ie=9">

	<!-- Include WET styles https://wet-boew.github.io/wet-boew-styleguide/index-en.html -->
	<link href="src/styles/ie8-theme.css" rel="stylesheet">

	<!-- Do Windows Move right away -->
	<SCRIPT type="text/vbscript" language="vbscript">
		window.focus()
		window.resizeTo (screen.AvailWidth/2), screen.AvailHeight
		window.moveTo 0, 0
	</SCRIPT>

	<style>
		.hidden {
			display: none;
		}

		.sr-only {
			position: absolute;
			left: -10000px;
			top: auto;
			width: 1px;
			height: 1px;
			overflow: hidden;
		}

		html,
		body {
			font-family: Helvetica, Arial, sans-serif;
			width: 100%;
			height: 100vh;
			overflow: hidden;
			margin: 0 auto;
			background-color: #F2F2F2;
		}

		div.main {
			padding-top: 32px;
			width: 650px;
			height: 100%;
			margin: 0 auto;
			text-align: center;
			background-color: white;
		}

		div.banner {
			width: 100%;
			vertical-align: middle;
			height: 57px;
			background-color: white;
		}

		/* FIP image (ESDC) */
		div.banner>img.fip {
			padding-top: 5px;
			width: 502px;
			height: 46px;
			vertical-align: bottom;
		}

		div#languageToggleSection {
			text-align: right;
		}

		div#languageToggleSection>a:hover {
			text-decoration: underline;
		}

		/** Hide Toggle depending on current language*/
		html[lang="fr"] a#languageFrench {
			display: none;
		}

		html[lang="en"] a#languageEnglish {
			display: none;
		}

		div#progress-overlay {
			position: absolute;
			width: 100%;
			height: 100%;
			left: 0;
			top: 0;
			background: rgba(6, 6, 6, 0.6);
			z-index: 9;
			vertical-align: middle;
		}

		div#progress-overlay>img {
			padding-left: 377px;
			padding-top: 415px;
		}

		/** Page */
		div.page {
			height: 100%;
			display: none;
		}

		body.page-1 #page-1,
		body.page-2 #page-2,
		body.page-3 #page-3,
		body.page-4 #page-4,
		body.page-5 #page-5,
		body.page-6 #page-6 {
			display: inherit;
		}

		div.pageContent {
			height: calc(100% - 289px);
			overflow-y: auto;
		}

		ul#page2Subnotes {
			padding-top: 32px;
			width: 445px;
			margin: 0 auto;
			text-align: left;
			font-size: 18px;
			line-height: 21px;
		}

		ul#page5Subnotes {
			padding-top: 32px;
			width: 363px;
			margin: 0 auto;
			text-align: left;
			font-size: 18px;
			line-height: 21px;
		}

		span#page2ContentP1 {
			font-size: 18px;
			position: relative;
			left: -55px;
		}

		p#page5Instructions {
			font-size: 18px;
		}


		ul.subnotes>li {
			padding-bottom: 21px;
		}

		div.pageMiddle {
			display: table;
			width: 100%;
		}

		div.pageMiddleContent {
			vertical-align: middle;
			display: table-cell;
		}

		div#pageHeader {
			width: 100%;
			text-align: center;
		}

		p.pageSubTitle {
			color: #8A8A8A;
			width: 394px;
			height: 25px;
			font-weight: bold;
			font-size: 24px;
			text-align: center;
			line-height: 28px;
			padding-top: 128px;
			margin: 0 auto;
		}

		h1#pageTitle {
			display: inline;
			padding: 5px;
			margin: 0;
		}

		div#pageIndicator {
			width: 150px;
			height: 10px;
			margin: 0 auto;
			text-align: center;
		}

		.pageIndicatorCircle:before {
			content: ' \25CF';
			color: #C4C4C4;
			vertical-align: top;
		}

		.text-large {
			font-size: 18px;
		}

		.text-grey {
			color: #8A8A8A;
		}

		.label-button-lrg {
			padding-top: 24px;
		}

		.checkbox-type-input {
			margin-left: 48px;
			border-left: 2px rgba(167, 167, 167, 0.15) solid;
			margin-top: 8px;
			margin-bottom: 8px;
			padding: 0;
		}

		body.page-1 span.pageIndicatorCircle-1:before,
		body.page-2 span.pageIndicatorCircle-1:before,
		body.page-2 span.pageIndicatorCircle-2:before,
		body.page-3 span.pageIndicatorCircle-1:before,
		body.page-3 span.pageIndicatorCircle-2:before,
		body.page-3 span.pageIndicatorCircle-3:before,
		body.page-4 span.pageIndicatorCircle-1:before,
		body.page-4 span.pageIndicatorCircle-2:before,
		body.page-4 span.pageIndicatorCircle-3:before,
		body.page-4 span.pageIndicatorCircle-4:before,
		body.page-5 span.pageIndicatorCircle-1:before,
		body.page-5 span.pageIndicatorCircle-2:before,
		body.page-5 span.pageIndicatorCircle-3:before,
		body.page-5 span.pageIndicatorCircle-4:before,
		body.page-5 span.pageIndicatorCircle-5:before,
		body.page-6 span.pageIndicatorCircle-1:before,
		body.page-6 span.pageIndicatorCircle-2:before,
		body.page-6 span.pageIndicatorCircle-3:before,
		body.page-6 span.pageIndicatorCircle-4:before,
		body.page-6 span.pageIndicatorCircle-5:before,
		body.page-6 span.pageIndicatorCircle-6:before {
			color: #4C71F4;
		}

		/** Action Bar Buttons */
		div.actionBar {
			position: fixed;
			bottom: 0;
			margin: 0;
			padding-top: 16px;
			width: 650px;
			box-shadow: 0px -5px 4px rgba(167, 167, 167, 0.15);
			height: 89px;
		}

		button.actionButton {
			padding: 12px 21px;
			margin: auto 0;
			min-width: 194px;
			height: 58px;
			border: 1px solid #26374A;
			font-size: 22px;
			background-color: #26374A;
			color: white;
			border-radius: 5px;
			box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);
		}

		button.actionButton:disabled {
			cursor: not-allowed;
			opacity: 0.4;
			background-color: #26374A !important;
		}

		button.actionButton:hover {
			background-color: #1C578A;
			border-color: #091C2D;
		}

		button.actionButton:active {
			background-color: #16446C;
			border-color: #000000;
		}

		div.page1-recheckButtonbar {
			height: 50px;
			margin: 0 147px;
			width: 650px;
			position: absolute;
			bottom: 161px;
			left: 0;
		}

		button.secondaryButton {
			min-width: 105px;
			padding: 12px 21px;
			height: 43px;
			font-size: 16px;
			background-color: #EAEBED;
			border-color: #DCDEE1;
			color: #335075;
			border-radius: 5px;
		}

		button.secondaryButton>img.button-icon {
			vertical-align: top;
			padding-right: 3px;
			margin: 0;
		}

		button.reloadCadButton {
			position: absolute;
			right: 0;
			top: 15px;
		}

		button.secondaryButton:hover {
			background-color: #CFD1D5;
			border-color: #091C2D;
		}

		button.secondaryButton:active {
			background-color: #BBBFC5;
			border-color: #000000;
		}

		/** Validation - Page 1 */

		ul.validationEntries {
			margin: 0 auto;
			padding: 0;
			width: 449px;
			list-style-type: none;
			font-style: normal;
			font-weight: normal;
			line-height: 28px;
			color: #000000;
		}

		ul.validationEntries>li {
			padding-bottom: 60px;
			padding-left: 55px;
			font-size: 20px;
			text-align: left;
			position: relative;
		}

		ul.validationEntries span.validationStatusIcon {
			display: none;
			position: absolute;
			left: 0;
			top: -5px;
		}

		ul.validationEntries span.validationStatusErrorMessage {
			display: none;
			position: absolute;
		}

		span.validationStatusErrorMessage {
			border-left: 3px solid red;
			margin-top: 5px;
			padding-left: 10px;
			width: calc(100% - 60px);
			font-size: 14px;
			line-height: 16px;
		}

		div.form-field>span.validationStatusErrorMessage {
			display: none;
			/* text-align: left;
			margin-left: 150px;
			width: 70%;
			padding-left: 5px; */
		}

		div.form-field-error>span.validationStatusErrorMessage {
			display: inherit;
		}

		ul.validationEntries>li.success>span.validationStatusSuccess,
		ul.validationEntries>li.error>span.validationStatusError,
		ul.validationEntries>li.error>span.validationStatusErrorMessage {
			display: block;
		}

		/** Style the forms */
		div.form-field {
			padding-bottom: 32px;
		}

		form.cad-form {
			overflow-y: auto;
		}

		div.form-field>label {
			width: 100%;
		}

		div.form-field>input[type="checkbox"] {
			display: inline-block;
			width: 25px;
			height: 25px;
			vertical-align: middle;
		}

		/** Show Related field capability when checked */
		div.form-field>input[type="checkbox"]:checked~div.form-field {
			display: inherit;
		}

		/** Hide related fields capability */
		div.form-field>input[type="checkbox"]~div.form-field {
			display: none;
		}

		div.form-field>input[type="text"] {
			width: 100%;
			height: 40px;
			font-size: 20px;
			border: 1px solid #CACACA;
			padding: 2px 2px 2px 20px;
			box-shadow: 0px 0px 0px rgba(0, 0, 0, 0);
		}

		div.form-field>select {
			width: 100%;
			height: 40px;
			font-size: 20px;
			border: 1px solid #CACACA;
			padding: 2px 2px 2px 20px;
			box-shadow: 0px 0px 0px rgba(0, 0, 0, 0);
		}

		div.form-field>input[readonly] {
			background-color: #EDEDED;
		}

		div.form-field>label {
			width: 100%;
			font-size: 16px;
			font-weight: 700;
			color: #7F7F7F;
			float: left;
			text-align: left;
		}

		div.form-checkbox>label {
			font-size: 20px;
			font-weight: 400;
		}

		div.form-field-checkbox>label {
			text-align: left;
			vertical-align: baseline;
			width: 90%;
		}

		p.instruction {
			text-align: left;
			width: 99%;
			font-size: 18px;
		}
	</style>

	<script type="text/vbscript">
	' User modifiable Constants
	' =======================================
	const FN_CAD = "CAD.xlsb"
	const FN_CONFIG = "configuration.properties"
	const MOD_CONFIG = "info.properties"
	const MOD_SUFFIX_EN = "-EN.docx"
	const MOD_SUFFIX_FR = "-FR.docx"
	const MOD_ATTACHMENTS_EN = "AttachmentsEN"
	const MOD_ATTACHMENTS_FR = "AttachmentsFR"

	' Configs
	' =======================================
	const CONFIG_GD_EPOST = "epost.email"

	' System Constants
	' =======================================
	const EXCEL_FILTER_MATCH = 0
	const EXCEL_FILTER_CONTAINS = 1
	const EXCEL_FILTER_STARTS = 2
	const EXCEL_FILTER_ENDS = 3
	const CAD_SHEET_DED = "DED"
	const CAD_SHEET_ERN = "ERN"
	const CAD_SHEET_PER = "PER"
	const CAD_SHEET_CAD = "CAD"
	const CAD_SHEET_JOB = "JOB"
	const CAD_SHEET_BEN = "BEN"
	const LANG_ENGLISH = 0
	const LANG_FRENCH = 1

	' Translations
	' Key is DOM ID
	' Value is an array where (English, French)
	' ==========================================
	Dim I18N
	Set I18N = CreateObject("Scripting.Dictionary")
	I18N.Add "applicationTitle", 		Array("Letter Builder", "Générateur de lettres")
	I18N.Add "pageTitle", 				Array("Letter Builder", "Générateur de lettres")
	I18N.Add "page1Subtitle",   		Array("Are the files installed correctly?", "Les fichiers sont-ils installés correctement ?")
	I18N.Add "page1Header",     		Array("What letter would you like to work on?", "Sur quelle lettre aimeriez-vous travailler?")
	I18N.Add "page1LetterType",     	Array("Letter Type", "Type de lettre")
	I18N.Add "page1LanguageSelect",     Array("Language of Letter", "Langue de la lettre")
	I18N.Add "page1OptionEnglish",      Array("English", "Anglais")
	I18N.Add "page1OptionFrench",       Array("French", "Français")
	I18N.Add "page1EffectiveDate",     	Array("Effective Date of Pay Action (dd/mm/yyyy)", "Date d’effet de l'action de paye (jj/mm/aaaa)")
	I18N.Add "page1ButtonStart",     	Array("Lets get started", "Débuter")
	I18N.Add "page1CadFileLabel",    	Array("CAD", "TBAC")
	I18N.Add "page1CadFileErrorMsg",   	Array("Missing <span id=""fileCadName""></span> in folder.", "<span id=""fileCadName""></span> est manquant dans le dossier.")
	I18N.Add "page1EnLtrLabel",    		Array("English Letter Template", "Gabarit Lettre - Anglais")
	I18N.Add "page1EnLtrErrorMsg",    	Array("Missing <span id=""fileEnLetterName""></span> in folder.", "<span id=""fileEnLetterName""></span> est manquant dans le dossier.")
	I18N.Add "page1FrLtrLabel",    		Array("French Letter Template", "Gabarit Lettre - Français")
	I18N.Add "page1FrLtrErrorMsg",    	Array("Missing  <span id=""fileFrLetterName""></span> in folder.", "<span id=""fileFrLetterName""></span> est manquant dans le dossier.")
	' I18N.Add "page1EnPSHCPOptLabel",    Array("English PSHCP Options Form", "Formulaire d’options RSSFP - Anglais")
	' I18N.Add "page1EnPSHCPOptErrorMsg", Array("Missing  <span id=""fileEnOptionsName""></span> in folder.", "<span id=""fileEnOptionsName""></span> est manquant dans le dossier.")
	' I18N.Add "page1FrPSHCPOptLabel",    Array("French PSHCP Options Form", "Formulaire d’options RSSFP - Français")
	' I18N.Add "page1FrPSHCPOptErrorMsg", Array("Missing  <span id=""fileFrOptionsName""></span> in folder.", "<span id=""fileFrOptionsName""></span> est manquant dans le dossier.")
	I18N.Add "page1RetryButton",		Array("Retry", "Réessayer")
	I18N.Add "page2Subtitle",			Array("Enter PRI in CAD", "Inscrire le CIDP dans le TBAC")
	I18N.Add "page2ContentP1",			Array("The CAD Excel spreadsheet is now open.", "Le fichier excel TBAC est maintenant ouvert.")
	I18N.Add "page2ContentL1",			Array("Acknowledge the CAD disclaimer (<b>IF SHOWN</b>)", "Cliquez sur Accepter et continuer, <b>si la page de Mise en garde – TBAC apparaît.</b>")
	I18N.Add "page2ContentL2",			Array("Navigate to the “CAD” tab of the file and enter in a single PRI into Cell B2", "Dans le fichier excel TBAC, inscrivez un CIDP à la cellule B2")
	I18N.Add "page2ContentL3",			Array("Ensure the following codes on the CAD are checked DED, PER, JOB, ERN, and BEN", "Assurez-vous que les onglets suivants sont cochés : DED, PER, JOB, ERN, BEN.")
	I18N.Add "page2ContentL4",			Array("Press “Auto Load” on CAD to populate employee data", "Cliquez sur Chargement automatique pour télécharger les données de l’employé")
	I18N.Add "page2ContentL5",			Array("Once complete, click next on this screen to continue", "Une fois complété, cliquez sur Suivant au bas de cet écran pour continuer")
	I18N.Add "page2ButtonNext",     	Array("Next", "Suivant")
	I18N.Add "page3Subtitle",			Array("Verify Information", "Vérifier les informations")
	I18N.Add "PayListLabel",			Array("Pay List", "Liste de paye")
	I18N.Add "PRILabel",				Array("PRI", "CIDP")
	I18N.Add "EENameLabel",				Array("Employee Name", "Nom de l'employé(e)")
	'I18N.Add "EEStreetLabel",			Array("Employee Address", "Adresse de l'employé(e)")
	'I18N.Add "EECityLabel",				Array("Employee City", "Ville de l'employé(e)")
	'I18N.Add "EEProvinceLabel",			Array("Employee Province", "Province de l'employé(e)")
	'I18N.Add "EEPostalCodeLabel",		Array("Employee Postal Code", "Code postale de l'employé(e)")
	I18N.Add "ReasonLabel",				Array("Reason", "Raison")
	I18N.Add "inputEffectiveDate",		Array("Effective Date of Pay Action (dd/mm/yyyy)", "Date d’effet de l'action de paye (jj/mm/aaaa)")
	I18N.Add "PersonalEmailLabel",		Array("Personal Email", "Courriel personnel")
	I18N.Add "CaseNumberLabel",			Array("Case Number", "Numéro de cas")
	I18N.Add "Page3InstructionsLabel",	Array("Letter Customizations", "Personnalisation de la lettre")
	I18N.Add "Page3InstructionsText",	Array("Content with checkmarks are loaded by default based on the information collected from the CAD. Please review and select or unselect as needed. Selecting field will add to the generated letter, unselected fields will not be displayed on the letter.", "Le contenu coché est chargé par défaut selon les informations recueillies dans le CAD. Veuillez les vérifier et les sélectionner ou les désélectionner si nécessaire. Les champs sélectionnés seront ajoutés à la lettre générée. Les champs non sélectionnés ne seront pas affichés sur la lettre.")
	I18N.Add "PensionandDSBLabel",		Array("Pension", "Pension")
	I18N.Add "DisabilityInsuranceLabel",Array("Disability Insurance", "Assurance invalidité")
	I18N.Add "PSMIPLabel",				Array("PSMIP", "RACGFP")
	I18N.Add "IANLabel",				Array("IAN", "NIO")
	I18N.Add "PSHCPLabel",				Array("PSHCP", "RSSFP")
	I18N.Add "PSHCPNoLabel",			Array("PSHCP Number", "Numéro RSSFP")
	I18N.Add "PSHCPLevelLabel",			Array("PSHCP Level", "Niveau RSSFP")
	I18N.Add "DCPLabel",			Array("DCP Status", "Statut RSD")
	I18N.Add "DCPPlanNoLabel",			Array("DCP Plan Number", "Numéro de régime RSD")
	I18N.Add "CertificateNumberLabel",	Array("Certificate Number", "Numéro de certificat")
	I18N.Add "UnionInsuranceLabel",		Array("Union Insurance", "Assurance syndicale")
	I18N.Add "BilingualBonusLabel",		Array("Bilingual Bonus","Prime au bilinguisme")
	I18N.Add "AnnualandSickLeaveLabel",	Array("Annual and Sick Leave", "Congés annuels et de maladie")
	I18N.Add "AWWLabel",				Array("AWW", "SDT (Semaine désignée de travail)")
	I18N.Add "CompensatoryLeaveLabel",	Array("Compensatory Leave", "Congés compensatoires")
	I18N.Add "PayRevisionLabel",		Array("Pay Revision", "Révisions salariales")
	I18N.Add "ContinuousServiceLabel",	Array("Continuous Service", "Service continu")
	I18N.Add "TermEmploymentLabel",		Array("Term Employment", "Emploi déterminé")
	I18N.Add "UnionDuesLabel",			Array("Union Dues", "Cotisations syndicales")
	I18N.Add "RALabel",					Array("RA", "Association récréative")
	I18N.Add "CreditUnionLabel",		Array("Credit Union", "Coopérative de crédit")
	I18N.Add "GCWCCLabel",				Array("GOC Workplace Charitable Campaign", "Campagne de charité en milieu de travail (CCMTGC)")
	I18N.Add "GarnishmentsLabel",		Array("Garnishments", "Saisie-arrêt")
	I18N.Add "StudentLoansLabel",		Array("Student Loans", "Prêt étudiant")
	I18N.Add "LIALabel",				Array("LIA", "CER")
	I18N.Add "SelffundedLabel",			Array("Self funded", "Retenues pour congé autofinancé")
	I18N.Add "ParentalLabel",			Array("Parental Leave", "Fin du congé de maternité/parental")
	I18N.Add "GradualLabel",			Array("Gradual Return to Work", "Retour progressif au travail")
	I18N.Add "ParkingLabel",			Array("Parking", "Retenues pour les frais de stationnement")
	I18N.Add "PSHCPLevel1",				Array("Level 1", "Niveau 1")
	I18N.Add "PSHCPLevel2",				Array("Level 2", "Niveau 2")
	I18N.Add "PSHCPLevel3", 			Array("Level 3", "Niveau 3")
'	I18N.Add "page3InvalidDate",		Array("Missing or Invalid Date", "Date invalide ou manquant")
'	I18N.Add "page3InvalidDCPPlan",		Array("Missing or Invalid DCP Plan Number", "Numéro de régime RSD invalide ou manquant")
	I18N.Add "page3-reloadbutton",		Array("Reset to default", "Réinitialiser")
	I18N.Add "page3ButtonGenerate", 	Array("Generate Letter", "Générer lettre")
	I18N.Add "page3Instruction",	 	Array("Please verify employee information:", "Svp vérifier les informations de l’employé:")
	I18N.Add "page4Subtitle",			Array("Review and Export", "Réviser et exporter")
	I18N.Add "page4ButtonNext",			Array("Export to PDF", "Exporter en PDF")
	I18N.Add "page4Instructions",	 	Array("The Letter generation is now complete. Please review content, before exporting to PDF", "Le processus est completé. Veuillez réviser le document avant d’exporter en PDF")
	I18N.Add "page5Instructions",	 	Array("Successfully exported letter to PDF. <br /><a href=""#"" onClick=""OpenPDFFile()""><span id=""pdfFileName"">Placeholder</span></a>", "Lettre exportée en PDF avec succès. <br /><a href=""#"" onClick=""OpenPDFFile()""><span id=""pdfFileName"">Placeholder</span></a>")
	I18N.Add "page5Subtitle",			Array("Ready to be sent to EPOST", "Prêt à être envoyé à Postel")
	I18N.Add "page5Subnote1",			Array("An email template had been created and ready to be sent to EPOST GD Box.", "Un gabarit de courriel a été créé et est prêt à être envoyé par Postel.")
	I18N.Add "page5Subnote2",			Array("Review the content of the email and send when ready.", "Révisez le contenu du courriel et procédez à l’expédition.")
	I18N.Add "page5Subnote3",			Array("Press “Generate next letter” to proceed with processing a new letter.", "Cliquez sur ‘’Générer une autre lettre’’ pour débuter la création d’une nouvelle lettre. ")
	I18N.Add "page5ButtonNext",			Array("Generate next letter", "Générer une autre lettre")

	' Reference to Workbook
	Dim excelWorkbook
	' Reference to Excel Application
	Dim excelApplication
	Set excelApplication = Nothing
	' Reference to Word Application
	Dim wordApplication
	' Reference to Word document generated.
	Dim wordDocument
	' Reference to PDF absolute file path generated.
	Dim pdfFilePath
	' File name of PDF
	Dim pdfFileName
	'Employee record
	Dim employeeRecord

	' Document Language
	Dim documentLanguage

	' Configuration settings
	Dim configurationSettings
	Set configurationSettings = CreateObject("Scripting.Dictionary")

	' List of installed modules
	Dim modulesAvailable
	Set modulesAvailable = CreateObject("Scripting.Dictionary")

	' Shell object
	Set objShell = CreateObject("WScript.Shell")
	currentDirectory = objShell.CurrentDirectory

	' List of Attachments
	Dim attachmentsEN, attachmentsFR
	Set attachmentsEN = CreateObject("System.Collections.ArrayList")
	Set attachmentsFR = CreateObject("System.Collections.ArrayList")

	' Properties
	' =======================================
	Dim cadFile, letterEnFile, letterFrFile, workingLetterFile, configFile
	cadFile = currentDirectory & "\" & FN_CAD
	configFile = currentDirectory & "\" & FN_CONFIG

	' Debug Flags
	' =======================================
	Dim debugExcelRowFilter
	debugExcelRowFilter = False

	' Classes
	' =======================================
	' Search Expression
	Class SearchExpression
		' Column index to apply the filter (starts at 1)
	    Public ColumnIndex
		' Simple expressions, generally =, <>, <, >. Checks FilterExpression before
		' BetweenExpression. So, if you defined both, the FilterExpression will
		' take precedence.
		Public FilterExpression
		' Complex expressions where value at index is between A and B
		Public BetweenExpressionA
		' Complex expressions where value at index is between A and B
		Public BetweenExpressionB
	End Class


	' Functions
	' =======================================
	' Open the CAD excel file.
	Sub OpenCAD()
		' Open CAD if not open.
		If excelApplication Is Nothing Then
			Set excelApplication = CreateObject("Excel.Application")
			With excelApplication
				.Left = (screen.Width/2) * 0.75
				.Top = 0
				.Width = (screen.Width/2) * 0.75
				.Height = (screen.Height) * 0.75 - 30
				.Visible = True
				.DisplayAlerts = False
			End With

			set excelWorkbook = excelApplication.Workbooks.Open(cadFile)
			excelWorkbook.Worksheets("CAD").Activate
		End If
	End Sub

	' Reset all objects at the start
	Sub ResetData()
		If Not(IsEmpty(cadDict)) Then
			cadDict.RemoveAll
		End If
		If Not(IsEmpty(employeeRecord)) Then
			employeeRecord.RemoveAll
		End If
		configurationSettings.RemoveAll
		attachmentsEN.Clear
		attachmentsFR.Clear
		
		document.getElementById("inputEffectiveDate").value = ""
		document.getElementById("cad-form").reset()
	End Sub

	' Close CAD
	Sub CloseCAD()
		excelWorkbook.Close(0)
		Set excelWorkbook = Nothing
		excelApplication.Quit
		Set excelApplication = Nothing
	End Sub

	'Check for available modules and add them to a list
	Sub CheckAvailableModules()
		Set fso = CreateObject("Scripting.FileSystemObject")
		Dim fileSuffix, languageCode, moduleName, propertyFile, selectElement, optionElement
		languageCode = document.getElementById("html").lang
		Set selectElement = document.getElementById("selectLetter")
		If languageCode = "fr" Then
			fileSuffix = MOD_SUFFIX_FR
		Else
			fileSuffix = MOD_SUFFIX_EN
		End If

		If selectElement.length = 0 Then
			For Each objFolder in fso.GetFolder(".\Templates\").SubFolders
				For Each file in objFolder.Files
		
					' Grab all files that end with -EN.docx and -FR.docx in all the template folders
					If instr(file.name, fileSuffix) <> 0 Then
					
					moduleName = Replace(file.name, fileSuffix, "")
					ElseIf instr(file.name, MOD_CONFIG) <> 0 Then
					propertyFile = file.Path
					End If
				Next
				If Not(IsNull(moduleName)) And Not(IsNull(propertyFile)) Then
					modulesAvailable.Add moduleName, propertyFile
					Set optionElement = document.createElement("option")
					optionElement.text = moduleName
					selectElement.Add optionElement
				End If
			Next
		End If
		Set fso = Nothing
	End Sub

	' Verify installation is good.
	Sub CheckInstall()
		LoadSelectedModule(document.getElementById("selectLetter").value)
		Call UpdateValidationStatusEntry("page1CadFileLabel", cadFile)
		Call UpdateValidationStatusEntry("page1EnLtrLabel", letterEnFile)
		Call UpdateValidationStatusEntry("page1FrLtrLabel", letterFrFile)

		If FileExists(cadFile) AND _
		   FileExists(letterEnFile) AND _
		   FileExists(letterFrFile) AND _
		   ValidateAttachments() Then
			document.getElementById("page1ButtonStart").disabled = false
			document.getElementById("recheck-install").className = "page1-recheckButtonbar hidden"
		Else
			document.getElementById("page1ButtonStart").disabled = true
			document.getElementById("recheck-install").className = "page1-recheckButtonbar"
		End If
	End Sub

	' Translate function. The language code must be en or fr
	Sub TranslateScreen(languageCode, e)
		' Flag the page lang code.
		document.getElementById("html").setAttribute "lang", languageCode

		arrayIdx = LANG_ENGLISH

		if languageCode = "fr" Then
			arrayIdx = LANG_FRENCH
		End If

		'Flip all IDs
		For Each messageKey in I18N.keys
			localizedArray = I18N(messageKey)
			document.getElementById(messageKey).innerHTML = localizedArray(arrayIdx)
		Next

		If languageCode = "fr" Then
			document.getElementById("languageEnglish").focus()
			document.getElementById("fip").src = "assets/img/fip-fr.png"
			document.getElementById("Reason").value = "Autre"
		Else
			document.getElementById("languageFrench").focus()
			document.getElementById("fip").src = "assets/img/fip-en.png"
			document.getElementById("Reason").value = "Other"
		End If
		document.getElementById("fileCadName").innerText = FN_CAD
		document.getElementById("fileEnLetterName").innerText = FN_ENGLISH_LETTER
		document.getElementById("fileFrLetterName").innerText = FN_FRENCH_LETTER

		If Not e is Nothing Then
			e.preventDefault()
		End If
	End Sub

	' Populate Fields based on CAD
	' FLAGS [
	' 0: Populate only checkbox inputs
	' 1: Populate entire Form
	']
	Sub PopulateScreenCADFields(flag)
		Set employeeRecord = GetCADData(0)

		Set employeeTextInputs = document.getElementById("cad-text-inputs")
		Set employeeCheckedInputs = document.getElementById("cad-checked-inputs")

		If flag = 1 Then
			UpdateFieldsInElement employeeTextInputs, employeeRecord
		End If
			UpdateFieldsInElement employeeCheckedInputs, employeeRecord

		employeeTextInputs.style.display = "inline"
		employeeCheckedInputs.style.display = "inline"
	End Sub

	Sub UpdateFieldsInElement(element, employeeRecord)
		For Each inputField In element.getElementsByClassName("cadField")
			fieldName = inputField.name
			If employeeRecord.Exists(fieldName) Then
				tagName = inputField.tagName
				Select Case  tagName
					Case "INPUT"
						If inputField.type = "text" Then
							inputField.value = employeeRecord(fieldName)
						ElseIf inputField.type = "checkbox" Then
							If employeeRecord(fieldName) <> "" Then
							inputField.checked = true
							Else
							inputField.checked = false
							End If

							If inputField.hasAttribute("childField") Then
								ShowCadField inputField.getAttribute("childField"), inputField.checked
							End If
						End If
					Case "SELECT"
						inputField.value = employeeRecord(fieldName)
				End Select
			End If
		Next
	End Sub

	Sub ShowCadField(element, visible)
		Set field = document.getElementById(element)


		If visible Then
			field.style.display = "block"
		Else	
			field.style.display = "none"
		End If
	End Sub

	' Set document language
	Sub SetDocumentLanguage()
		Dim docLang
		docLang = document.getElementById("selectLanguage").value

		If docLang = "French" OR docLang = "Français" Then
			documentLanguage = Array("Français", "French")
		Else 
			documentLanguage = Array("Anglais", "English")
		End If

	End Sub
	' Generate English Letter
	Sub GenerateEnglishLetter()
		GenerateLetter(letterEnFile)
	End Sub

	' Generate French Letter
	Sub GenerateFrenchLetter()
		GenerateLetter(letterFrFile)
	End Sub

	' Adds in the slashes while typing in the effective Date
	Sub EffectiveDateFormatting(dateInput)
		Dim currentDate
		Set currentDate = document.getElementById(dateInput)
		If Len(currentDate.value) = 2 OR Len(currentDate.value) = 5 Then
			tempDate = currentDate.value & "/"
			currentDate.value = tempDate
		End If

		If Len(currentDate.value) > 10 Then
			currentDate.value = Mid(currentDate.value, 1, Len(currentDate.value) -1) 
		End If
	End Sub

	' Generate Letter Helper
	Sub GenerateLetter(letterFile)
		ToggleWordGenerateButtons(false)
		Set employeeRecord = PopulateFieldsManualInput()

		CreateTempLetter(letterFile)

		' Open word
		Set wordApplication = CreateObject("Word.Application")
		With wordApplication
			.Left = (screen.Width/2) * 0.75
			.Top = 0
			.Width = (screen.Width/2) * 0.75
			.Height = (screen.Height) * 0.75 - 30
			.Visible = True
			.DisplayAlerts = False
		End With

		Set wordDocument = wordApplication.Documents.Open(workingLetterFile)
		employeeRecord.Add "Date" ,   Day(Date) & "/" & Month(Date) & "/" & Year(Date)

		For Each key in employeeRecord.keys
			SearchAndRep key, employeeRecord(key)
			SearchAndRemoveIfs key, employeeRecord(key)
		Next

		ToggleWordGenerateButtons(true)
	End Sub

	' Create the PDF file.
	Sub CreatePDF()
		Set employeeRecord = PopulateFieldsManualInput()
		pdfFileName = GetFileNameToUse() & ".pdf"

		pdfFilePath = currentDirectory & "\GeneratedLetters\" & pdfFileName
		wordDocument.SaveAs pdfFilePath, 17 'Index for PDF
		wordDocument.Close(0) '0 is don't save changes https://docs.microsoft.com/en-us/office/vba/api/word.wdsaveoptions
		' Clean up
		Set wordDocument = Nothing

		window.setTimeOut "CleanUpWord()", 2000
	End Sub

	' Open PDF File.
	Sub OpenPDFFile()
		objShell.Run(pdfFilePath)
	End Sub

	' Clean up Word
	Sub CleanUpWord()
		' Clean up
		wordApplication.Quit
		Set wordApplication = Nothing
		DeleteTempLetter
	End Sub

	' Find and Replace all key value pairs
	Sub SearchAndRep(searchTerm, replaceTerm)
		Set myRange = wordApplication.ActiveDocument.Content

		With myRange.Find
		  .ClearFormatting
		  .Replacement.ClearFormatting
		  .Text = "<<" & searchTerm & ">>"
		  .Replacement.Text = replaceTerm
		  .Execute ,,,,,,,,,,2 ' ReplaceAllFlag
		End With

		Set myRange = Nothing
	End Sub

	' Bulk remove entire section blocks of <<IF VAR>> .... <<END IF VAR>>
	Sub SearchAndRemoveIfs(searchTerm, termData)
		Set myRange = wordApplication.ActiveDocument.Content

		If IsEmpty(termData) Or _
		   termData = false Or _
		   termData = "" Or _
		   IsNull(termData) Then
			' Remove Entire section
			With myRange.Find
			  .ClearFormatting
			  .MatchWildcards = True
			  .IgnoreSpace = True
			  .Replacement.ClearFormatting
			  .Text = "?\<\< IF " & searchTerm & " \>\>*\<\< END IF " & searchTerm & " \>\>"
			  .Replacement.Text = ""
			  .Execute ,,,,,,,,,,2 ' ReplaceAllFlag
			End With
		Else
			' Remove start <<IF term>>
			With myRange.Find
			  .ClearFormatting
			  .MatchWildcards = True
			  .IgnoreSpace = True
			  .Replacement.ClearFormatting
			  .Text = "?\<\< IF " & searchTerm & " \>\>"
			  .Replacement.Text = "^11"
			  .Execute ,,,,,,,,,,2 ' ReplaceAllFlag
			End With

			' Remove end start <<END IF term>>
			With myRange.Find
			  .ClearFormatting
			  .IgnoreSpace = True
			  .MatchWildcards = True
			  .Replacement.ClearFormatting
			  .Text = "?\<\< END IF " & searchTerm & " \>\>"
			  .Replacement.Text = ""
			  .Execute ,,,,,,,,,,2 ' ReplaceAllFlag
			End With
		End If

		Set myRange = Nothing
	End Sub
	
	' Validate attachments
	Function ValidateAttachments()
		If CInt(configurationSettings("attachments.en")) = attachmentsEN.Count AND _
		   CInt(configurationSettings("attachments.fr")) = attachmentsFR.Count Then
			ValidateAttachments = True
		Else
			ValidateAttachments = False
		End If
	End Function

	Function GetEffectiveDate()
		GetEffectiveDate = document.getElementById("inputEffectiveDate").value
	End Function

	Function GetEffectiveDateUserInput()
		GetEffectiveDateUserInput = document.getElementById("EffectiveDate").value
	End Function

	' Load module information
	Function LoadSelectedModule(moduleName)
		Set fso = CreateObject("Scripting.FileSystemObject")
		Dim moduleLocation, moduleProperties
		moduleProperties = modulesAvailable(moduleName)
		LoadConfig(configFile)
		LoadConfig(moduleProperties)
		moduleLocation = Replace(moduleProperties, "\" & MOD_CONFIG, "")
		Set objFolder = fso.GetFolder(moduleLocation)
		For Each file in objFolder.Files
			If instr(file.name, MOD_SUFFIX_FR) Then
				letterFrFile = file.Path
			ElseIf instr(file.name, MOD_SUFFIX_EN) Then
				letterEnFile = file.Path
			End If
		Next
		For Each subfolder in objFolder.SubFolders 
			For Each file in subfolder.Files
				If instr(subfolder, MOD_ATTACHMENTS_EN) Then
					attachmentsEN.Add file.Path
				ElseIf instr(subfolder, MOD_ATTACHMENTS_FR) Then
					attachmentsFR.Add file.Path
				End If
			Next
		Next
	End Function

	' Read configuration files
	Function LoadConfig(filePath)
		Set fso = CreateObject("Scripting.FileSystemObject")
		Set fileHandler = fso.OpenTextFile(filePath)
		Dim line, keyValueDelimIdx, key, value
		Do Until fileHandler.AtEndOfStream
			line = fileHandler.ReadLine
			line = Trim(line)

			' See if comment line
			keyValueDelimIdx = InStr(line, "#")

			if keyValueDelimIdx <> 1 Then
				' Not comment line, so lets read the key value pair delimited by "="
				keyValueDelimIdx = InStr(line, "=")

				If keyValueDelimIdx <> 0 AND keyValueDelimIdx <> Len(line) Then
					key = Mid(line, 1, keyValueDelimIdx - 1)
					value = Mid(line, keyValueDelimIdx + 1)
					configurationSettings.Add key, value
				End If
			End If
		Loop
		fileHandler.Close
		Set fso = Nothing
		Set fileHandler = Nothing
	End Function

	' Get the standard file name. You must call this only after creating employeeRecord
	Function GetFileNameToUse()
		Dim dayPortion, monthPortion
		'dayPortion = Day(GetEffectiveDate())
		'monthPortion = Month(GetEffectiveDate())

		effectiveDate = GetEffectiveDateUserInput()

		employeeRecord("EffectiveDate") = GetEffectiveDateUserInput()
		effectiveDate = Replace(effectiveDate, "/", "")
		
		If documentLanguage(1) = "French" Then
			GetFileNameToUse = effectiveDate & configurationSettings("prefix.fr") & employeeRecord("EmployeeName")
		Else
			GetFileNameToUse = effectiveDate & configurationSettings("prefix.en") & employeeRecord("EmployeeName")
		End IF

	End Function

	' Get the case number. You must call this only after creating employeeRecord
	Function GetCaseNo()
		If employeeRecord("CaseNumber") <> "" Then
			GetCaseNo = employeeRecord("CaseNumber")
		Else
			GetCaseNo = "CaseNo"
		End If
	End Function

	' Populate Fields based on Manual Input
	Function PopulateFieldsManualInput()
		Set listOfInputs = document.getElementsByTagName("input")
		Set listOfSelects = document.getElementsByTagName("select")
		For Each inputField in listOfInputs
			If InStr(inputField.className, "cadField") Then
				fieldName = inputField.name
				If inputField.type = "checkbox" Then
					If inputField.checked = true Then
						employeeRecord(fieldName) = "1"
					Else
						employeeRecord(fieldName) = ""
					End If
				Else
					employeeRecord(fieldName) = inputField.value
				End If
			End If
		Next

		For Each selectField in listOfSelects
			If InStr(selectField.className, "cadField") Then
				fieldName = selectField.name
				employeeRecord(fieldName) = selectField.value
			End If
		Next

		' check if the PSHCP level is 1 or 2/3 and set the status in the employee record
		If employeeRecord("PSHCP") = "1" Then
			If instr(employeeRecord("PSHCPLevel"), "1") Then
				employeeRecord("PSHCPLevel1") = "1"
				employeeRecord("PSHCPLevel2Or3") = ""
			Else
				employeeRecord("PSHCPLevel1") = ""
				employeeRecord("PSHCPLevel2Or3") = "1"
			End If
		End If
		' check if the province is set in manual entry and set the status in the employeeRecord
		If employeeRecord("EmployeeProvince") = "ON" OR employeeRecord("EmployeeProvince") = "QC" Then
			employeeRecord("EmployeeProvinceONOrQC") = "1"
		Else
			employeeRecord("EmployeeProvinceONOrQC") = ""
		End If

		' Check if the Date is valid
		Dim tempResult

		tempResult = validateAndFormatDate(employeeRecord("EffectiveDate"))
		If tempResult <> "" Then
			employeeRecord("EffectiveDate") = tempResult
		Else
			employeeRecord("EffectiveDate") = GetEffectiveDate()
		End If

		Set PopulateFieldsManualInput = employeeRecord
	End Function

	' Validate and return dates
	Function validateAndFormatDate(dateToBeValidated)
		Dim resultDate, convertedDate
		Dim delimiter, datePartDay, datePartMonth, datePartYear

		if InStr(dateToBeValidated, "/")  Then
			delimiter = "/"
		Else
			delimiter = "-"
		End If

		resultDate = Split(dateToBeValidated, delimiter)

		if (UBound(resultDate) + 1) = 3 Then
			If delimiter = "/" Then
				datePartDay = resultDate(0)
				datePartMonth = resultDate(1)
				datePartYear = resultDate(2)
			Else
				datePartDay = resultDate(2)
				datePartMonth = resultDate(1)
				datePartYear = resultDate(0)
			End If

			validateAndFormatDate = datePartDay & "/" & datePartMonth & "/" & datePartYear

			If Not(IsDate(validateAndFormatDate)) OR datePartMonth > 12 Then
				validateAndFormatDate = ""
			Else
				validateAndFormatDate = datePartDay & "/" & datePartMonth & "/" & datePartYear
			End If
		Else
			validateAndFormatDate = ""
		End If
	End Function

	' Get the data from CAD
	' index is the row number of the PRI we wish to pull out, however doesn't get used anywhere yet.
	Function GetCADData(index)
		Set employeeRecord = Nothing
		Dim cadDict
		Set cadDict = CreateObject("Scripting.Dictionary")

		' Sheets
		Dim sheetCad, sheetJOB
		Set sheetCad = excelWorkbook.Worksheets(CAD_SHEET_CAD)
		Set sheetJOB = excelWorkbook.Worksheets(CAD_SHEET_JOB)

		' Data from CAD tab
		Dim employeeId, tempResult
		employeeId = sheetCad.Range("B2").Value
		cadDict.Add "PRI", employeeId

		' Data For Employee
		GetCADDataEmployee index, cadDict, employeeId

		' Effective Date or default to Nov 15
		tempResult = SimpleFindRowUsingFilter(sheetJOB, "A2", employeeId, 2, 9, "JOB", 10, true)

		tempResult = validateAndFormatDate(tempResult)
		If tempResult <> "" Then
			cadDict.Add "EffectiveDate", tempResult
		Else
			cadDict.Add "EffectiveDate", GetEffectiveDate()
		End If

		' Get Data Helpers
		GetCADPensionandDisability index, cadDict, employeeId
		GetCADDataServiceBuyback index, cadDict, employeeId
		GetCADDataPSMIP index, cadDict, employeeId
		GetCADDataPSHCP index, cadDict, employeeId
		GetCADDataDCP index, cadDict, employeeId
		GetCADDataUnionInsurance index, cadDict, employeeId
		GetCADDataBilingualBonus index, cadDict, employeeId
		GetCADDataOtherBenefits index, cadDict, employeeId
		GetCADDataLIA index, cadDict, employeeId
		GetCadDataParental index, cadDict, employeeId

		Set sheetCad = Nothing
		Set sheetJOB = Nothing
		Set GetCADData = cadDict
	End Function

	Function GetCADPensionandDisability(index, cadDict, employeeId)
		Dim sheetDED
		Set sheetDED = excelWorkbook.Worksheets(CAD_SHEET_DED)

		' Pension and Supplementary Death Benefit: DED Column W SDB001
		tempResult = SimpleFindRowUsingFilter(sheetDED, "A2", employeeId, 2, 23, "SDB001", 23, true)
		If tempResult <> "" Then
			cadDict.Add "PensionandDSB", "1"
		Else
			cadDict.Add "PensionandDSB", ""
		End If

		'Reset tempResult
		tempResult = ""

		' Disability Insurance: DED Column R – codes 751, 753, 809, 810
		tempResult = SimpleFindRowUsingFilter(sheetDED, "A2", employeeId, 2, 18, Array("751", "753", "809", "810"), 18, true)
		If tempResult <> "" Then
			cadDict.Add "DisabilityInsurance", "1"
		Else
			cadDict.Add "DisabilityInsurance", ""
		End If

	End Function
	' Get LIA from CAD
	Function GetCADDataLIA(index, cadDict, employeeId)
		Dim sheetERN
		Set sheetERN = excelWorkbook.Worksheets(CAD_SHEET_ERN)

		' LIA: ERN Column L Code UEL on checks between November 15 2020 and November 15 2021
		Dim dateExpression, typeExpression

		' Check if code UEL
		Set typeExpression = New SearchExpression
		typeExpression.ColumnIndex = 18
		typeExpression.FilterExpression = "UEL"

		' Check if within 1 year
		Set dateExpression = New SearchExpression
		dateExpression.ColumnIndex = 14
		Dim today, oneYearAgo
		'Don't use date format strings as Excel seems to convert dd/mm/yyyy to mm/dd/yyyy
		today = date()
		oneYearAgo = DateAdd("yyyy",-1,date())
		dateExpression.BetweenExpressionA = ">=" & CDbl(oneYearAgo)
		dateExpression.BetweenExpressionB = "<=" & CDbl(today)

		Dim expressionArray
		expressionArray = Array(typeExpression, dateExpression)
		tempResult = FindRowUsingFilter(sheetERN, "A2", employeeId, 2, expressionArray, 12, true)
		If tempResult <> "" Then
			Dim LIATax
			LIATax = CDbl(tempResult)
			If LIATax > 0 Then
				cadDict.Add "LIA", "1"
			Else
				cadDict.Add "LIA", ""
			End If
		End If

		Set sheetERN = Nothing
	End Function

	' Get Other Benefits from CAD
	Function GetCADDataOtherBenefits(index, cadDict, employeeId)
		' Sheets
		Dim sheetJOB, sheetDED
		Set sheetJOB = excelWorkbook.Worksheets(CAD_SHEET_JOB)
		Set sheetDED = excelWorkbook.Worksheets(CAD_SHEET_DED)

		' Get AWW which is number x 2
		tempResult = FindRowUsingNoAdditionalFilter(sheetJOB, "A2", employeeId, 2, 16, true)
		If IsNumeric(tempResult) Then
			tempResult = FormatNumber(Round(tempResult * 2.0, 2), 2)
			cadDict.Add "AWW", tempResult
			cadDict.Add "AnnualandSickLeave", "1"
		Else
			cadDict.Add "AWW", 0
			cadDict.Add "AnnualandSickLeave", ""
		End If

		' Get Status of Union Deductions
		tempResult = SimpleFindRowUsingFilter(sheetDED, "A2", employeeId, 2, 18, Array("5C6", "214", "304", "632", "642", "644", "970"), 18, false)
		cadDict.Add "UnionDues", tempResult

		'Get Recreational Association (RA) Deductions
		tempResult = SimpleFindRowUsingFilter(sheetDED, "A2", employeeId, 2, 18, "789", 18, false)
		cadDict.Add "RA", tempResult

		'Get Credit Union Status
		tempResult = SimpleFindRowUsingFilter(sheetDED, "A2", employeeId, 2, 18, "786*", 18, false)
		cadDict.Add "CreditUnion", tempResult

		'Get Garnishments Status
		tempResult = SimpleFindRowUsingFilter(sheetDED, "A2", employeeId, 2, 18, Array("729", "731" ), 18, false)
		cadDict.Add "Garnishments", tempResult

		'Get Student Loan Status
		tempResult = SimpleFindRowUsingFilter(sheetDED, "A2", employeeId, 2, 18, "544*", 18, false)
		cadDict.Add "StudentLoans", tempResult

		'GCWCC Contributions
		Dim expressionArray, dateExpression, typeExpression

		'Check if code is 790*
		Set typeExpression = New SearchExpression
		typeExpression.ColumnIndex = 18
		typeExpression.FilterExpression = "790*"

		Set dateExpression = New SearchExpression
		dateExpression.ColumnIndex = 14

		Dim today, oneMonthAgo
		today = date()
		oneMonthAgo = DateAdd("m", -1, date())
		' 'Don't use date format strings as Excel seems to convert dd/mm/yyyy to mm/dd/yyyy

		dateExpression.BetweenExpressionA = ">=" & CDbl(oneMonthAgo)
		dateExpression.BetweenExpressionB = "<=" & CDbl(today)

		expressionArray = Array(typeExpression, dateExpression)
		tempResult = FindRowUsingFilter(sheetDED, "A2", employeeId, 2, expressionArray, 18, true)

		If tempResult <> "" Then
			cadDict.Add "GCWCC", tempResult
		Else
			cadDict.Add "GCWCC", ""
		End If

		'Get Self-funded leave status
		tempResult = SimpleFindRowUsingFilter(sheetDED, "A2", employeeId, 2, 18, Array("675*", "850*"), 18, false)
		cadDict.Add "Selffunded", tempResult

		Set sheetDED = Nothing
		Set sheetJOB = Nothing
	End Function

	' Get Union Insurance from CAD
	Function GetCADDataUnionInsurance(index, cadDict, employeeId)
		' Sheets
		Dim sheetDED
		Set sheetDED = excelWorkbook.Worksheets(CAD_SHEET_DED)

		' Union Insurance
		tempResult = SimpleFindRowUsingFilter(CAD_SHEET_DED, "A2", employeeId, 2, 18, "943", 18, true)
		cadDict.Add "UnionInsurance", tempResult

		Set sheetDED = Nothing
	End Function

		'Bilingual Bonus
	Function GetCADDataBilingualBonus(index, cadDict, employeeId)
		Dim sheetERN
		Set sheetERN = excelWorkbook.Worksheets(CAD_SHEET_ERN)

		Dim tempResult

		tempResult = SimpleFindRowUsingFilter(sheetERN, "A2", employeeId, 2, 18, "141", 18, true)
		cadDict.Add "BilingualBonus", tempResult

		Set sheetERN = Nothing
	End Function

	' Get Dental Plan Data from CAD
	Function GetCADDataDCP(index, cadDict, employeeId)
		' Sheets
		Dim sheetBEN
		Set sheetBEN = excelWorkbook.Worksheets(CAD_SHEET_BEN)

		Dim tempResult

		' Add in empty plan number to be filled in manually
		cadDict.Add "DCPPlanNo", ""

		' DCP Cert No
		tempResult = SimpleFindRowUsingFilter(sheetBEN, "A2", employeeId, 2, 4, "11", 12, false)
		If tempResult <> "" AND Len(tempResult) = 8 Then
			' Format the number to ## ### #### if it was ########.
			tempResult = Mid(tempResult, 1,2) & " " & Mid(tempResult, 3,3) & " " & Mid(tempResult, 6,3)
		End If

		cadDict.Add "DCPCertNo", tempResult

		If cadDict("DCPCertNo") <> "" Then
			cadDict.Add "DCPStatus", "1"
		Else
			cadDict.Add "DCPStatus", ""
		End If
		Set sheetBEN = Nothing
	End Function

	' Get Health Plan Data from CAD
	Function GetCADDataPSHCP(index, cadDict, employeeId)
		' Sheets
		Dim sheetDED, sheetBEN
		Set sheetDED = excelWorkbook.Worksheets(CAD_SHEET_DED)
		Set sheetBEN = excelWorkbook.Worksheets(CAD_SHEET_BEN)

		Dim tempResult

		' PSHCP No
		tempResult = SimpleFindRowUsingFilter(sheetBEN, "A2", employeeId, 2, 4, "10", 12, false)
		If tempResult <> "" AND Len(tempResult) = 7 Then
			cadDict.Add "PSHCP", "1"
			' Format the number to # ### #### if it was #######.
			tempResult = Mid(tempResult, 1,1) & " " & Mid(tempResult, 2,3) & " " & Mid(tempResult, 5,3)
		Else
			cadDict.Add "PSHCP", ""
		End If
		cadDict.Add "PSHCPNo", tempResult

		' PSHCP Level
		tempResult = SimpleFindRowUsingFilter(sheetDED, "A2", employeeId, 2, 23, "HCP00*", 23, true)
		tempResult = Mid(tempResult, 6)
		If tempResult = "3" Then		' Ugh, clean this up as need to use the level in the condition
			cadDict.Add "PSHCPLevel2Or3", "1"
			cadDict.Add "PSHCPLevel1", ""
		ElseIf tempResult = "2" Then
			cadDict.Add "PSHCPLevel2Or3", "1"
			cadDict.Add "PSHCPLevel1", ""
		Else
			cadDict.Add "PSHCPLevel2Or3", ""
			cadDict.Add "PSHCPLevel1", "1"
		End If
		cadDict.Add "PSHCPLevel", tempResult

		Set sheetDED = Nothing
		Set sheetBEN = Nothing
	End Function

	' Get PSMIP from CAD
	Function GetCADDataPSMIP(index, cadDict, employeeId)
		' Sheets
		Dim sheetDED, sheetBEN
		Set sheetDED = excelWorkbook.Worksheets(CAD_SHEET_DED)
		Set sheetBEN = excelWorkbook.Worksheets(CAD_SHEET_BEN)

		Dim tempResult

		' Employee has PSMIP?
		tempResult = SimpleFindRowUsingFilter(sheetDED, "A2", employeeId, 2, 18, Array("750","811"), 18, false)
		cadDict.Add "PSMIP", tempResult

		If cadDict("PSMIP") Then
			' PSMIPNo
			tempResult = SimpleFindRowUsingFilter(sheetBEN, "A2", employeeId, 2, 12, "CL*", 12, false)
			' Truncate out CL
			cadDict.Add "PSMIPNo", Mid(tempResult, 3)
		End If

		Set sheetDED = Nothing
		Set sheetBEN = Nothing
	End Function

	' Get Service Buyback from CAD
	Function GetCADDataServiceBuyback(index, cadDict, employeeId)
		' Sheets
		Dim sheetDED
		Set sheetDED = excelWorkbook.Worksheets(CAD_SHEET_DED)

		Dim tempResult

		' Employee has Service Buyback
		tempResult = SimpleFindRowUsingFilter(sheetDED, "A2", employeeId, 2, 18, Array("5H*","5I*"), 18, false)
		cadDict.Add "ServiceBuyback", tempResult <> ""
		Set sheetDED = Nothing
	End Function

	' Get Parental Leave from CAD
	Function GetCadDataParental(index, cadDict, employeeId)
		' Sheets
		Dim sheetJOB
		Set sheetJOB = excelWorkbook.Worksheets(CAD_SHEET_JOB)

		' LIA: Job Column I Code PLA on checks from the last business year
		Dim dateExpression, typeExpression, RFLExpression

		' Check if code PLA
		Set typeExpression = New SearchExpression
		typeExpression.ColumnIndex = 8
		typeExpression.FilterExpression = "PLA"

		' Check if within 1 year
		Set dateExpression = New SearchExpression
		dateExpression.ColumnIndex = 10
		Dim today, oneYearAgo
		'Don't use date format strings as Excel seems to convert dd/mm/yyyy to mm/dd/yyyy
		today = date()
		oneYearAgo = DateAdd("yyyy",-1,date())
		dateExpression.BetweenExpressionA = ">=" & CDbl(oneYearAgo)
		dateExpression.BetweenExpressionB = "<=" & CDbl(today)

		Dim expressionArray
		expressionArray = Array(typeExpression, dateExpression)
		tempResult = FindRowUsingFilter(sheetJOB, "A2", employeeId, 2, expressionArray, 9, true)

		If tempResult <> "" Then
			Dim Parental
			Parental = CStr(tempResult)

			If Parental = "R" Then
				cadDict.Add "Parental", "1"
			Else
				cadDict.Add "Parental", ""
			End If
		End If

		Set sheetERN = Nothing
	End Function

	' Get Employee Info from CAD
	Function GetCADDataEmployee(index, cadDict, employeeId)
		' Sheets
		Dim sheetPER
		Set sheetPER = excelWorkbook.Worksheets(CAD_SHEET_PER)

		' Data From Employee
		cadDict.Add "EmployeeName", sheetPER.Range("D3").Value
		cadDict.Add "EmployeeStreet1", sheetPER.Range("E3").Value
		cadDict.Add "EmployeeStreet2", sheetPER.Range("F3").Value
		cadDict.Add "EmployeeStreet3", sheetPER.Range("G3").Value
		cadDict.Add "EmployeeCity", sheetPER.Range("H3").Value
		cadDict.Add "EmployeeProvince", sheetPER.Range("J3").Value
		cadDict.Add "EmployeePostalCode", sheetPER.Range("I3").Value

		If cadDict("EmployeeProvince") = "QC" Then
			cadDict.Add "EmployeeProvinceQC", "QC"
		Else
			cadDict.Add "EmployeeProvinceQC", ""
		End If

		If cadDict("EmployeeProvince") = "ON" Then
			cadDict.Add "EmployeeProvinceON", "ON"
		Else
			cadDict.Add "EmployeeProvinceON", ""
		End If

		If cadDict("EmployeeProvince") = "ON" OR cadDict("EmployeeProvince") = "QC" Then
			cadDict("EmployeeProvinceONOrQC") = "1"
		Else
			cadDict("EmployeeProvinceONOrQC") = ""
		End If

		Set sheetPER = Nothing
	End Function

	' Simple filters on one column
	Function SimpleFindRowUsingFilter(sheet, rangeStart, employeeId, employeeIdColumnIdx, searchForColumnIdx, searchForExpression, retrieveColumnIdx, isLast)
		Dim expression
		Set expression = New SearchExpression
		expression.ColumnIndex = searchForColumnIdx
		expression.FilterExpression = searchForExpression

		Dim expressionArray
		expressionArray = Array(expression)

		SimpleFindRowUsingFilter = FindRowUsingFilter(sheet, rangeStart, employeeId, employeeIdColumnIdx, expressionArray, retrieveColumnIdx, isLast)
	End Function

	' Just filter employee ID and apply no additional filter
	Function FindRowUsingNoAdditionalFilter(sheet, rangeStart, employeeId, employeeIdColumnIdx, retrieveColumnIdx, isLast)
		FindRowUsingNoAdditionalFilter = FindRowUsingFilter(sheet, rangeStart, employeeId, employeeIdColumnIdx, Array(), retrieveColumnIdx, isLast)
	End Function

	' Use Filter to grab data
	Function FindRowUsingFilter(sheet, rangeStart, employeeId, employeeIdColumnIdx, searchForExpressionArray, retrieveColumnIdx, isLast)
		' https://docs.microsoft.com/en-us/office/vba/api/excel.range.autofilter

		Dim remainingResults
		Dim areasResults
		Dim rowIdx
		Dim areaIdx

		' Remove filter and allow error in case no filter.
		On Error Resume Next
		sheet.ShowAllData

		'Apply filter. See https://docs.microsoft.com/en-us/office/vba/api/excel.range.autofilter
		With sheet.Range(rangeStart)
			.AutoFilter employeeIdColumnIdx, "=" & employeeId
			For Each expression In searchForExpressionArray
				If Not IsEmpty(expression.FilterExpression) Then
					' Filter statement
					If IsArray(expression.FilterExpression) Then
						.AutoFilter expression.ColumnIndex, expression.FilterExpression, 7
					Else
						.AutoFilter expression.ColumnIndex, expression.FilterExpression
					End If
				Else
					' Compare statement
					.AutoFilter expression.ColumnIndex, expression.BetweenExpressionA, 1, expression.BetweenExpressionB
				End If
			Next
		End With

		If debugExcelRowFilter Then
			If isLast Then
				MsgBox sheet.Name & " - Open Excel File to see current filter as we are grabbing last row"
			Else
				MsgBox sheet.Name & " - Open Excel File to see current filter as we are grabbing first row"
			End If
		End If

		' Select all ranges of visible rows which also include the "header" rows.
		' This can return multiple sets of rows known as "Areas"
		' 12 is from https://docs.microsoft.com/en-us/office/vba/api/excel.xlcelltype
		Set remainingResults = sheet.UsedRange.SpecialCells(12)

		' Backup the areas.
		Set areasResults = remainingResults.Areas

		' Empty if we only have visible header rows which is area 1 range match.
		isEmptyResults = areasResults(1).Rows.Count = 2 AND areasResults.Count = 1

		If debugExcelRowFilter Then
			MsgBox "Area: " & areasResults.Count
			MsgBox "Area 1 Row:" & areasResults(1).Rows.Count
			MsgBox "Area 2 Row:" & areasResults(2).Rows.Count
		End If
		If isEmptyResults Then
			FindRowUsingFilter = ""
			If debugExcelRowFilter Then
				MsgBox "No matches"
			End If
		ElseIf isLast Then
			' Grab the last area match and then grab the row count for that area to get the
			' last row.
			areaIdx = areasResults.Count
			Dim indexRow
			FindRowUsingFilter = ""

			' Why do we have empty rows at the end of these tables ...
			' Check first row as only "entry" rows have this populated.
			Do
				rowIdx = areasResults(areaIdx).Rows.Count

				' Loop over last area match, then work backwards.
				While indexRow = "" AND rowIdx > 0
					indexRow = areasResults(areaIdx).Cells(rowIdx, 1)
					If indexRow <> "" AND NOT (areaIdx = 1 AND rowIdx <= 2) Then
						FindRowUsingFilter = areasResults(areaIdx).Cells(rowIdx, retrieveColumnIdx)
					End If
					rowIdx = rowIdx - 1
				Wend
				areaIdx = areaIdx - 1
			Loop While indexRow = "" And areaIdx > 0

			If debugExcelRowFilter Then
				MsgBox "Found in Last Area >" & FindRowUsingFilter
			End If
		ElseIf areasResults(1).Rows.Count = 2 Then
			' Grab first match which should be in Match 2.
			FindRowUsingFilter = areasResults(2).Cells(1, retrieveColumnIdx)
			If debugExcelRowFilter Then
				MsgBox "Found in Area 2 >" & FindRowUsingFilter & "<"
			End If
		Else
			' Grab first row which should follow match 1 row as the match followed directly
			' after the header row, therefore same area box.
			FindRowUsingFilter = areasResults(1).Cells(3, retrieveColumnIdx)
			If debugExcelRowFilter Then
				MsgBox "Found in Area 1 >" & FindRowUsingFilter & "<"
			End If
		End If
	End Function

	' Create temporary file
	Function CreateTempLetter(sourceFile)
		Dim FSO
		Set FSO = CreateObject("Scripting.FileSystemObject")
		Dim fileName
		fileName = GetFileNameToUse()

		workingLetterFile = currentDirectory & "\GeneratedLetters\" & fileName & ".docx"
		FSO.CopyFile sourceFile, workingLetterFile
	End Function

	' Clean up temporary file
	Function DeleteTempLetter()
		Dim FSO
		Set FSO = CreateObject("Scripting.FileSystemObject")
		FSO.DeleteFile workingLetterFile
	End Function

	' See if file exists
	Function FileExists(FilePath)
	  Set fso = CreateObject("Scripting.FileSystemObject")
	  If fso.FileExists(FilePath) Then
		FileExists=CBool(1)
	  Else
		FileExists=CBool(0)
	  End If
	End Function

	' Toggle Work in progress
	Function ToggleWorkInProgress(isVisible)
		If isVisible Then
			document.getElementById("WorkInProgress").className = ""
		Else
			document.getElementById("WorkInProgress").className = "hidden"
		End If
	End Function

	' Enable or disable the word document generation
	Function ToggleWordGenerateButtons(isEnabled)
		document.getElementById("page3ButtonGenerate").Disabled = Not(isEnabled)
	End Function

	Function EmailSubjectLine()
		EmailSubjectLine = GetFileNameToUse()
	End Function

	Function EmailBody()
		languageCode = document.getElementById("html").lang

		If languageCode = "fr" Then
			EmailBody = "<ul>" & _
							"<li>Nom de l’employé: " & employeeRecord("EmployeeName") & "</li>" & _
							"<li>CIDP: " & employeeRecord("PRI")  & "</li>" &  _
							"<li>Cas # : " & GetCaseNo()  & "</li>" & _
							"<li>Adresse courriel personnelle : " & employeeRecord("PersonalEmail")  & "</li>" & _
							"<li>Langue : " & documentLanguage(0) & "</li>" & _
							"</ul>"

		ElseIf languageCode = "en" Then
			EmailBody = "<ul>" & _
							"<li>EE name: " & employeeRecord("EmployeeName") & "</li>" & _
							"<li>PRI: " & employeeRecord("PRI")  & "</li>" &  _
							"<li>Case #: " & GetCaseNo()  & "</li>" & _
							"<li>EE personal Email address: " & employeeRecord("PersonalEmail")  & "</li>" & _
							"<li>Language: " & documentLanguage(1) & "</li>" & _
							"</ul>"
		End If
	End Function

	Function SendEmail()
		Set objOutlook = CreateObject("Outlook.Application")
		Set objEmail = objOutlook.CreateItem(0) '0 is email

        With objEmail
			.To = configurationSettings(CONFIG_GD_EPOST)
			.Subject = EmailSubjectLine()
			.HTMLBody = EmailBody()
			.Attachments.Add pdfFilePath
			If documentLanguage(1) = "English" Then
				For Each attachment in attachmentsEN
				.Attachments.Add attachment
				Next
			ElseIf documentLanguage(1) = "French" Then
				For Each attachment in attachmentsFR
				.Attachments.Add attachment
				Next
			End If
            .Display
        End With

		Set objEmail = Nothing
		Set objOutlook = Nothing
	End Function

	' Flip the installation status
	Function UpdateValidationStatusEntry(LabelId, FilePath)
		Result = FileExists(FilePath)

		If Result Then
			document.getElementById(LabelId).parentElement.className = "success"
		Else
			document.getElementById(LabelId).parentElement.className = "error"
		End If
		UpdateValidationStatusEntry = Result
	End Function

	' Go to the given page number
	Function GoToPage(pageNo, e)
		' Show page first
		document.body.className = "page-" & pageNo
		ShowProgressOverlay(True)

 		Select Case pageNo
			Case 2
				window.setTimeOut "GoToPage2", 1000, "VBScript"
			Case 3
				window.setTimeOut "GoToPage3", 1000, "VBScript"
			Case 4
				window.setTimeOut "GoToPage4", 1000, "VBScript"
			Case 5
				window.setTimeOut "GoToPage5", 1000, "VBScript"
			Case 6
				window.setTimeOut "GoToPage6", 1000, "VBScript"
			Case Else
				ResetData()
				window.setTimeOut "GoToPage1", 0, "VBScript"
		End Select

	End Function

	' Toggle overlay
	Function ShowProgressOverlay(isOn)
		Dim classValue
		If IsOn Then
			classValue = ""
		Else
			classValue = "hidden"
		End If

		' Turn on the indicator
		document.getElementById("progress-overlay").className = classValue

	End Function

	' Toggle Error

	' All validation of forms in the letterbuilder
	Function validateForm()
		Dim targetElement
		' Validate EffectiveDate
		Set targetElement = document.getElementById("EffectiveDate")
		If validateAndFormatDate(targetElement.value) = "" Then
			targetElement.parentElement.className = "col-xs-6 form-field form-field-error"
			ToggleWordGenerateButtons(false)
		Else
			targetElement.parentElement.className = "col-xs-6 form-field"
			ToggleWordGenerateButtons(true)
		End If

		' Validate DCP Plan No
		Set targetElement = document.getElementById("DCPPlanNo")
		Set targetCheckbox = document.getElementById("DCPStatus")
		If targetElement.value = "" AND targetCheckbox.checked = true Then
			ToggleWordGenerateButtons(false)
			targetElement.parentElement.className = "form-field form-field-error"
		Else
			ToggleWordGenerateButtons(true)
			targetElement.parentElement.className = "form-field"
		End If
	End Function

	Function GoToPage1()
		CheckAvailableModules()
		ShowProgressOverlay(False)
	End Function

	Function GoToPage2()
		SetDocumentLanguage()
		CheckInstall
		ShowProgressOverlay(False)
	End Function

	Function GoToPage3()
		OpenCAD()
		ShowProgressOverlay(False)
	End Function

	Function GoToPage4()
		PopulateScreenCADFields(1)
		validateForm()
		ShowProgressOverlay(False)
	End Function

	Function GoToPage5()
		If documentLanguage(1) = "English" Then
			GenerateEnglishLetter()
		Else
			GenerateFrenchLetter()
		End If
		ShowProgressOverlay(False)
	End Function

	Function GoToPage6()
		CreatePDF()
		document.getElementById("pdfFileName").innerText = pdfFileName
		SendEmail()
		ShowProgressOverlay(False)
	End Function

	Function GoToPage7()
		ShowProgressOverlay(False)
	End Function

	' Events
	' =======================================
	' This procedure is executing on program open
	Sub window_onload()
		LoadConfig(configFile)
		'Opens the application on the left side of the screen
		TranslateScreen "en", Nothing
		GoToPage 1, Nothing
	End Sub

</script>

</head>

<body>
	<div class="banner">
		<img src="assets/img/fip-en.png" alt="Logo of ESDC" class="fip" id="fip" />
	</div>

	<!-- Main Body -->
	<div class="main" id="main">

		<div class="col-xs-12">
			<!-- Language Switch -->
			<div id="languageToggleSection" class="col-xs-8 col-xs-offset-4">
				<a href="#" id="languageEnglish" onClick="TranslateScreen('en', event)">English</a>
				<a href="#" id="languageFrench" onClick="TranslateScreen('fr', event)">Français</a>
			</div>

			<!-- Title -->
			<div>
				<h1 id="pageTitle">Letter Builder</h1> V2.0
				<!-- Version String -->
				<div id="pageIndicator">
					<span class="pageIndicatorCircle pageIndicatorCircle-1"></span>
					<span class="pageIndicatorCircle pageIndicatorCircle-2"></span>
					<span class="pageIndicatorCircle pageIndicatorCircle-3"></span>
					<span class="pageIndicatorCircle pageIndicatorCircle-4"></span>
					<span class="pageIndicatorCircle pageIndicatorCircle-5"></span>
					<span class="pageIndicatorCircle pageIndicatorCircle-6"></span>
				</div>
			</div>
		</div>

		<!-- =========================================
		      Pages now starting
		     ========================================= -->

		<!-- RFL Letter Select Page 1 -->
		<div id="page-1" data-pageNo="1" class="page">
			<div class="pageContent col-xs-12">

				<h2 class="col-xs-8 col-xs-offset-2 text-grey" id="page1Header">What letter would you like to work on?</h2>

				<span class=" col-xs-12 mrgn-tp-xl"></span>

				<div class="col-xs-8 col-xs-offset-2 form-field">
					<label for="selectLetter" id="page1LetterType">Letter Type</label>

					<select id="selectLetter" class="cadField" name="selectLetter">
					</select>
				</div>

				<div class="col-xs-8 col-xs-offset-2 form-field">
					<label id="page1LanguageSelect">Language of Letter</label>
					<select id="selectLanguage" class="cadField" name="selectLanguage">
						<option id="page1OptionEnglish">English</option>
						<option id="page1OptionFrench">French</option>
					</select>
				</div>

				<div class="col-xs-8 col-xs-offset-2 form-field">
					<label id="page1EffectiveDate" for="inputEffectiveDate">Effective Date of Pay Action</label>
					<input type="text" id="inputEffectiveDate" class="cadField" name="inputEffectiveDate" onkeyup="EffectiveDateFormatting('inputEffectiveDate')">
				</div>
			</div>

			<div class="actionBar col-xs-12">
				<button class="actionButton" id="page1ButtonStart" onClick="GoToPage(2,event)">Lets Get Started</button>
			</div>
		</div>

		<!-- RFL Page 2 -->
		<div id="page-2" data-pageNo="2" class="page">
			<p class="pageSubTitle" id="page1Subtitle">Are the files installed correctly?</p>
			<div class="pageContent pageMiddle col-xs-12">
				<div class="pageMiddleContent">
					<ul class="validationEntries">
						<li>
							<span class="validationStatusIcon validationStatusSuccess">
								<img src="assets/img/checkbox.png" alt="Pass" />
							</span>
							<span class="validationStatusIcon validationStatusError">
								<img src="assets/img/error.png" alt="Failed" />
							</span>
							<span id="page1CadFileLabel" class="validationStatusLabel">CAD file</span>
							<span class="validationStatusErrorMessage" id="page1CadFileErrorMsg">
								Missing "<span id="fileCadName"></span>" in folder.
							</span>
						</li>
						<li>
							<span class="validationStatusIcon validationStatusSuccess">
								<img src="assets/img/checkbox.png" alt="Pass" />
							</span>
							<span class="validationStatusIcon validationStatusError">
								<img src="assets/img/error.png" alt="Failed" />
							</span>
							<span id="page1EnLtrLabel" class="validationStatusLabel">English Letter Template</span>
							<span class="validationStatusErrorMessage" id="page1EnLtrErrorMsg">
								Missing "<span id="fileEnLetterName"></span>" in folder.
							</span>
						</li>
						<li>
							<span class="validationStatusIcon validationStatusSuccess">
								<img src="assets/img/checkbox.png" alt="Pass" />
							</span>
							<span class="validationStatusIcon validationStatusError">
								<img src="assets/img/error.png" alt="Failed" />
							</span>
							<span id="page1FrLtrLabel" class="validationStatusLabel">French Letter Template</span>
							<span class="validationStatusErrorMessage" id="page1FrLtrErrorMsg">
								Missing "<span id="fileFrLetterName"></span>" in folder.
							</span>
						</li>
					</ul>
				</div>
			</div>
			<div class="page1-recheckButtonbar" id="recheck-install">
				<button class="secondaryButton" onClick="CheckInstall()">
					<img class="button-icon" src="assets/img/reload.png" alt="Reload" />
					<span id="page1RetryButton">
						Retry
					</span>
				</button>
			</div>
			<div class="actionBar">
				<button class="actionButton" id="page1ButtonStart" onClick="GoToPage(3,event)">Lets get started</button>
			</div>
		</div>

		<!-- RFL Page 3 -->
		<div id="page-3" data-pageNo="3" class="page">
			<p class="pageSubTitle" id="page2Subtitle">Enter PRI</p>
			<div class="pageContent pageMiddle">
				<div class="pageMiddleContent">
					<span id="page2ContentP1">The CAD Excel spread sheet is now open. </span>
					<ul id="page2Subnotes" class="subnotes">
						<li id="page2ContentL1"> Acknowledge the CAD disclaimer (<b>IF SHOWN</b>)</li>
						<li id="page2ContentL2"> Please navigate to the "CAD" tab of the file and enter in a single PRI into cell B2.</li>
						<li id="page2ContentL3"> Ensure the following codes on the CAD are checked DED, PER, JOB, ERN, BEN, and CAD </li>
						<li id="page2ContentL4"> Press “Auto Load” on CAD to populate employee data </li>
						<li id="page2ContentL5"> Once complete click next on this screen to continue</li>
					</ul>
				</div>
			</div>
			<div class="actionBar">
				<button class="actionButton" id="page2ButtonNext" onClick="GoToPage(4,event)">Next</button>
			</div>
		</div>

		<!-- RFL Page 4 -->
		<div id="page-4" data-pageNo="4" class="page">

			<div class="col-xs-12">
				<h3 class="text-grey" id="page3Subtitle">Verify Information</h3>
			</div>

			<div class="pageContent col-xs-12">
				<form id="cad-form" class="cad-form" onchange="validateForm()">

					<span class="col-xs-12 mrgn-tp-lg"></span>

					<div class="col-xs-7 label-button-lrg">
						<p class="text-large text-left" id="page3Instruction">Please verify employee information:</p>
					</div>

					<div class="col-xs-5">
						<button class="btn btn-default btn-lg pull-right" onClick="PopulateScreenCADFields(1)" type="button"><img src="assets/img/reload.png" id="page3-reloadbutton" alt="Reload"> Reset to default</button>
					</div>

					<div id="cad-text-inputs">
						<span class="col-xs-12 mrgn-bttm-lg"></span>


						<div class="col-xs-6 form-field">
							<label id="PayListLabel" for="PayList">Paylist</label>
							<input id="PayList" type="text" class="cadField" placeholder="####" name="PayList">
						</div>

						<div class="col-xs-6 form-field">
							<label id="PRILabel" for="PRI">PRI</label>
							<input id="PRI" type="text" class="cadField" readonly name="PRI">
						</div>

						<div class="col-xs-6 form-field">
							<label id="EffectiveDateLabel" for="EffectiveDate">Effective Date</label>
							<input id="EffectiveDate" type="text" class="cadField" name="EffectiveDate" onkeyup="EffectiveDateFormatting('EffectiveDate')">
						</div>

						<div class="col-xs-6 form-field">
							<label id="CaseNumberLabel" for="CaseNumber">Case #</label>
							<input id="CaseNumber" type="text" class="cadField" placeholder="######" name="CaseNumber">
						</div>

						<div class="col-xs-12 form-field">
							<label id="EENameLabel" for="EEName">Name</label>
							<input id="EEName" type="text" class="cadField" readonly name="EmployeeName">
						</div>

						<div class="col-xs-12 form-field">
							<label id="PersonalEmailLabel" for="PersonalEmail">Personal Email (Employee)</label>
							<input id="PersonalEmail" type="text" class="cadField" name="PersonalEmail">
						</div>

						<div class="col-xs-12 form-field">
							<label id="ReasonLabel" for="Reason">Reason</label>
							<input id="Reason" type="text" class="cadField" readonly name="Reason">
						</div>
					</div>

					<span class="col-xs-12 mrgn-tp-lg"></span>

					<div class="col-xs-7 label-button-lrg">
						<p class="text-large text-left" id="Page3InstructionsLabel">Letter Customizations:</p>
					</div>


					<div id="cad-checked-inputs">
						<div class="col-xs-5">
							<button class="btn btn-default btn-lg pull-right" id="reload-cad" title="Reload" onClick="PopulateScreenCADFields(0)" type="button"><img src="assets/img/reload.png" alt="Reload"> Reset to default</button>
						</div>

						<span class="col-xs-12 mrgn-bttm-lg"></span>

						<span class="col-xs-12 text-large text-left mrgn-bttm-lg" id="Page3InstructionsText">
							Content with checkmarks are loaded by default based on the information collected from the CAD.
							Please review and select or unselect as needed. Selecting field will add to the generated letter,
							unselected fields will not be displayed on the letter.
						</span>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="PensionandDSB" class="btn btn-default cadField" type="checkbox" name="PensionandDSB">
								<label id="PensionandDSBLabel" for="PensionandDSB" class="mrgn-lft-md">Pension and Insurance</label>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="DisabilityInsurance" class="btn btn-default cadField" type="checkbox" name="DisabilityInsurance">
								<label id="DisabilityInsuranceLabel" for="DisabilityInsurance" class="mrgn-lft-md">Disability Insurance</label>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-0">
							<div class="form-checkbox pull-left">
								<input id="PSMIP" class="btn btn-default cadField" type="checkbox" name="PSMIP" childField="PSMIPField" onclick="ShowCadField('PSMIPField', event.target.checked)">
								<label id="PSMIPLabel" for="PSMIP" class="mrgn-lft-md">PSMIP</label>
							</div>
						</div>

						<div id="PSMIPField" class="col-xs-11 checkbox-type-input">
							<div class="col-xs-5">
								<div id="IANLabel" class="mrgn col-xs-12 text-left mrgn-bttm-0 mrgn-tp-0">IAN</div>
								<div class="form-field col-xs-12 mrgn-bttm-0 mrgn-tp-0" style="padding: 0; padding-left: 14px;">
									<input id="IAN" type="text" class="cadField" name="PSMIPNo">
								</div>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-0">
							<div class="form-checkbox pull-left">
								<input id="PSHCP" class="btn btn-default cadField" type="checkbox" name="PSHCP" childField="PSHCPField" onclick="ShowCadField('PSHCPField', event.target.checked)">
								<label id="PSHCPLabel" for="PSHCP" class="mrgn-lft-md">PSHCP</label>
							</div>
						</div>

						<div id="PSHCPField" class="col-xs-11 checkbox-type-input">
							<div class="col-xs-5">
								<div id="PSHCPNoLabel" class="mrgn col-xs-12 text-left mrgn-bttm-0 mrgn-tp-0">PSHCP #</div>
								<p id="PSHCPLevelLabel" class="hidden" style="display: none;"></p>
								<div class="form-field col-xs-12 mrgn-bttm-0 mrgn-tp-0" style="padding: 0; padding-left: 14px;">
									<select id="PSHCPLevel" name="PSHCPLevel" class="cadField">
										<option value="1" id="PSHCPLevel1"> Level 1 </option>
										<option value="2" id="PSHCPLevel2"> Level 2 </option>
										<option value="3" id="PSHCPLevel3"> Level 3 </option>
									</select>
								</div>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-0">
							<div class="form-checkbox pull-left">
								<input id="DCPStatus" class="btn btn-default cadField" type="checkbox" childField="DCPStatusField" name="DCPStatus" onclick="ShowCadField('DCPStatusField', event.target.checked)">
								<label id="DCPLabel" for="DCPStatus" class="mrgn-lft-md">DCP</label>
							</div>
						</div>

						<div id="DCPStatusField" class="col-xs-11 checkbox-type-input">
							<div class="col-xs-5">
								<div id="DCPPlanNoLabel" class="mrgn col-xs-12 text-left mrgn-bttm-0 mrgn-tp-0">DCP Plan #</div>
								<div class="form-field col-xs-12 mrgn-bttm-0 mrgn-tp-0" style="padding: 0; padding-left: 14px;">
									<select id="DCPPlanNo" name="DCPPlanNo" class="cadField">
										<option value="55555"> 55555 </option>
										<option value="55556"> 55556 </option>
									</select>
								</div>
							</div>

							<div class="col-xs-5">
								<div id="CertificateNumberLabel" class="mrgn col-xs-12 text-left mrgn-bttm-0 mrgn-tp-0">Certificate #</div>
								<div class="form-field col-xs-12 mrgn-bttm-0 mrgn-tp-0" style="padding: 0; padding-left: 14px;">
									<input id="DCPCertNo" type="text" class="cadField" name="DCPCertNo">
								</div>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="UnionInsurance" class="btn btn-default cadField" type="checkbox" name="UnionInsurance">
								<label id="UnionInsuranceLabel" for="UnionInsurance" class="mrgn-lft-md ">Union Insurance</label>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="BilingualBonus" class="btn btn-default cadField" type="checkbox" name="BilingualBonus">
								<label id="BilingualBonusLabel" for="BilingualBonus" class="mrgn-lft-md">Bilingual Bonus</label>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-0">
							<div class="form-checkbox pull-left">
								<input id="AnnualandSickLeave" class="btn btn-default cadField" type="checkbox" name="AnnualandSickLeave" childField="AnnualandSickLeaveField" onclick="ShowCadField('AnnualandSickLeaveField', event.target.checked)">
								<label id="AnnualandSickLeaveLabel" for="AnnualandSickLeave" class="mrgn-lft-md">Annual and Sick Leave</label>
							</div>
						</div>

						<div id="AnnualandSickLeaveField" class="col-xs-11 checkbox-type-input">
							<div class="col-xs-5">
								<div class="mrgn col-xs-12 text-left mrgn-bttm-0 mrgn-tp-0" id="AWWLabel">AWW</div>
								<div class="form-field col-xs-12 mrgn-bttm-0 mrgn-tp-0" style="padding: 0; padding-left: 14px;">
									<input id="AWW" type="text" class="cadField" name="AWW">
								</div>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="CompensatoryLeave" class="btn btn-default cadField" type="checkbox" name="CompensatoryLeave">
								<label id="CompensatoryLeaveLabel" for="CompensatoryLeave" class="mrgn-lft-md">Compensatory Leave</label>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="PayRevision" class="btn btn-default cadField" type="checkbox" name="PayRevision">
								<label id="PayRevisionLabel" for="PayRevision" class="mrgn-lft-md">Pay Revision</label>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="ContinuousService" class="btn btn-default cadField" type="checkbox" name="ContinuousService">
								<label id="ContinuousServiceLabel" for="ContinuousService" class="mrgn-lft-md">Continuous Service</label>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="TermEmployment" class="btn btn-default cadField" type="checkbox" name="TermEmployment">
								<label id="TermEmploymentLabel" for="TermEmployment" class="mrgn-lft-md">Term Employment</label>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="UnionDues" class="btn btn-default cadField" type="checkbox" name="UnionDues">
								<label id="UnionDuesLabel" for="UnionDues" class="mrgn-lft-md">Union Dues</label>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="RA" class="btn btn-default cadField" type="checkbox" name="RA">
								<label id="RALabel" for="RA" class="mrgn-lft-md">RA</label>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="CreditUnion" class="btn btn-default cadField" type="checkbox" name="CreditUnion">
								<label id="CreditUnionLabel" for="CreditUnion" class="mrgn-lft-md">Credit Union</label>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="GCWCC" class="btn btn-default cadField" type="checkbox" name="GCWCC">
								<label id="GCWCCLabel" for="GCWCC" class="mrgn-lft-md">GOC Workplace Charitable Campaign</label>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="Garnishments" class="btn btn-default cadField" type="checkbox" name="Garnishments">
								<label id="GarnishmentsLabel" for="Garnishments" class="mrgn-lft-md">Garnishments</label>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="StudentLoans" class="btn btn-default cadField" type="checkbox" name="StudentLoans">
								<label id="StudentLoansLabel" for="StudentLoans" class="mrgn-lft-md">Student Loans</label>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="LIA" class="btn btn-default cadField" type="checkbox" name="LIA">
								<label id="LIALabel" for="LIA" class="mrgn-lft-md">LIA</label>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="Selffunded" class="btn btn-default cadField" type="checkbox" name="Selffunded">
								<label id="SelffundedLabel" for="Selffunded" class="mrgn-lft-md">Self Funded</label>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="Parental" class="btn btn-default cadField" type="checkbox" name="Parental">
								<label id="ParentalLabel" for="Parental" class="mrgn-lft-md">Parental Leave</label>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="Gradual" class="btn btn-default cadField" type="checkbox" name="Gradual">
								<label id="GradualLabel" for="Gradual" class="mrgn-lft-md">Gradual Return to Work</label>
							</div>
						</div>

						<div class="col-xs-12 mrgn-bttm-md">
							<div class="form-checkbox pull-left">
								<input id="Parking" class="btn btn-default cadField" type="checkbox" name="Parking">
								<label id="ParkingLabel" for="Parking" class="mrgn-lft-md">Parking</label>
							</div>
						</div>
					</div>
				</form>
			</div>

			<div class="actionBar col-xs-12">
				<button class="actionButton pull-right" id="page3ButtonGenerate" onClick="GoToPage(5,event)">Generate Letter</button>
			</div>
		</div>

		<!-- Page 5 -->
		<div id="page-5" data-pageNo="5" class="page">
			<p class="pageSubTitle" id="page4Subtitle">Review and Export</p>
			<div class="pageContent pageMiddle">
				<div class="pageMiddleContent">
					<p id="page4Instructions">
						The Letter generation is now complete. Please review content, before exporting to PDF.
					</p>
				</div>
			</div>
			<div class="actionBar">
				<button class="actionButton" id="page4ButtonNext" onClick="GoToPage(6,event)">Export to PDF</button>
			</div>
		</div>

		<!-- Page 6 -->
		<div id="page-6" data-pageNo="6" class="page">
			<p class="pageSubTitle" id="page5Subtitle">Ready to be sent to EPOST</p>
			<div class="pageContent pageMiddle">
				<div class="pageMiddleContent">
					<img src="assets/img/completed.png" alt="Completed" /><br />
					<p id="page5Instructions">
						Successfully exported letter to PDF. <br />
						<a href="#" onClick="OpenPDFFile()"><span id="pdfFileName">Placeholder</span></a>
					</p>
					<ul id="page5Subnotes" class="subnotes">
						<li id="page5Subnote1">An email template had been created and ready to be sent to EPOST GD Box.</li>
						<li id="page5Subnote2">Review the content of the email and send when ready.</li>
						<li id="page5Subnote3">Press “Generate next letter” to proceed with processing a new letter.</li>
					</ul>
				</div>
			</div>
			<div class="actionBar">
				<button class="actionButton" id="page5ButtonNext" onClick="GoToPage(1,event)">Generate next letter</button>
			</div>
		</div>
	</div>
	<div id="progress-overlay">
		<img src="assets/img/spinner.gif" alt="In progress" />
	</div>
</body>

</html>